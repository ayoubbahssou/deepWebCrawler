{
  "name": "form-scraper",
  "description": "Scrape and Submit forms easily...",
  "version": "0.0.4",
  "author": {
    "name": "ClickHere",
    "email": "js@clickhere.co.il"
  },
  "dependencies": {
    "when": "2.7.x",
    "promisified-request": "latest",
    "underscore": "1.5.x",
    "cheerio": "0.12.x"
  },
  "devDependencies": {
    "mocha": "1.16.x",
    "chai": "1.8.x",
    "sinon": "1.7.x",
    "sinon-chai": "2.4.x",
    "chai-as-promised": "4.1.x"
  },
  "keywords": [
    "form",
    "submit",
    "scraper",
    "scraping"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/tounano/form-scraper.git"
  },
  "main": "form-scraper",
  "engines": {
    "node": ">= 0.8.0"
  },
  "license": "MIT",
  "readme": "Form Scraper - Scrape & Submit forms Easily...\r\n==============================================\r\n\r\nThe easiest way to fill forms from Node.JS\r\n\r\n## What's in Form Scraper for me?\r\n\r\n### The Problem\r\n\r\nSometimes you need to automate your form filling. However, the website that hosts the form, seeds some security tokens\r\nin the form. The security tokens are random and attached to your current session.\r\n\r\n### The Solution\r\n\r\nYou need to scrape the form first, including all the default values. Afterwards, you'll need to fill the details and\r\nsubmit the form.\r\n\r\n`form-scraper` automates all the process.\r\n\r\n## Installation\r\n\r\n    $ npm install form-scraper\r\n\r\nor add `form-scraper` to your `package.json` dependencies.\r\n\r\n## Usage\r\n\r\nYou can use `form-scraper` both in functional and object oriented way.\r\n\r\n### Functional usage\r\n\r\n#### .fetchForm(formId, url, promisifiedRequest)\r\n\r\nFetches a form with `formId` from the specified url.\r\n\r\n##### - arguments\r\n\r\n* `formId` - the `id` property of a form in a given html. Should be prefixed with \"#\".\r\n* `url` - The url that hosts the form.\r\n* `promisifiedRequest` - The `request` object (which returns promise) that performs the request.\r\n\r\n##### - return value\r\n\r\nThe return value is a `Promise` which eventually should resolve to a JSON object with the following properties:\r\n\r\n* `action` - The url where the form should be submitted to.\r\n* `data` - A JSON hash object where the `keys` are the `name` properties of the form elemnts and the `value`\r\n is the default value.\r\n\r\n#### .provideForm(promiseForForm)\r\n\r\nCreates an object that implements the `provideForm` method.\r\n\r\n##### - arguments\r\n\r\n* `promiseForForm` - a JSON object that represents the form.\r\n\r\n##### - return value\r\n\r\nThe return value is an object that implements the `provideForm` method.\r\n\r\n#### .submitForm(formValues, formProvider, promisifiedRequest)\r\n\r\nSubmits the form...\r\n\r\n##### - arguments\r\n\r\n* `formValues` - a JSON hash object where the `keys` represent the property names and the `values` is the data to post.\r\n* `formProvider` - An object that implements the `provideForm()` method and returns a Promise for form.\r\n* `promisifiedRequest` - The `request` object (which returns promise) that performs the request.\r\n\r\n##### - return value\r\n\r\nThe return value is a `Promise` which eventually should resolve to the `response` of the submission of the form.\r\n\r\n#### example\r\n\r\n```javascript\r\nvar pRequest = require(\"promisified-request\").create();\r\nvar fScraper = require(\"form-scraper\");\r\n\r\nvar formStructure = fScraper.fetchForm(\"#login\", \"http://www.someurl.com\", pRequest);\r\nvar loginDetails = { user: \"my user\", password: \"my password\" };\r\n\r\nfScraper.submitForm(loginDetails, fScraper.provideForm(formStructure), pRequest).then( function (response) {\r\n    console.log(response.body);\r\n};\r\n```\r\n\r\n### Object Oriented usage\r\n\r\nAs of today, the module consists of two classes:\r\n\r\n* `form-scraper.ScrapingFormProvider` - Scrapes the form.\r\n* `form-scraper.FormSubmitter` - Submits the form.\r\n\r\n#### ScrapingFormProvider\r\n\r\n##### .updateOptions(options)\r\n\r\nExtends the current options. The default value is undefined, so it's important to inject the dependencies using this\r\nmethod.\r\n\r\nReturns itself.\r\n\r\nThe `options` argument, should have the following values:\r\n\r\n* `formId` - The `id` of the Dom element that represents the form to scrape.\r\n* `url` - The url that hosts the form.\r\n* `promisifiedRequest` - The `request` object that will perform the scraping.\r\n\r\n##### .provideForm()\r\n\r\nReturns a promise that eventually will be resolved to the form structure.\r\n\r\n#### FormSubmitter\r\n\r\n##### .updateOptions(options)\r\n\r\nExtends the current options. The default value is undefined, so it's important to inject the dependencies using this\r\nmethod.\r\n\r\nReturns itself.\r\n\r\nThe `options` argument, should have the following values:\r\n\r\n* `formProvider` - An object that implements `provideForm()` and returns a promise for a form.\r\n* `promisifiedRequest` - The `request` object that will perform the submission.\r\n\r\n##### .submitForm(formValues)\r\n\r\nSubmits the form with `formValues`.\r\n\r\n`formValues` is a hash JSON object with values to post.\r\n\r\nIt returns a promise that eventually will be resolved to the `response` object that comes out of the `request` object.\r\n\r\n#### example\r\n\r\n```javascript\r\nvar pRequest = require(\"promisified-request\").create();\r\nvar fScraper = require(\"form-scraper\");\r\n\r\nvar loginDetails = { user: \"my user\", password: \"my password\" };\r\n\r\nvar formProvider = new fScraper.ScrapingFormProvider();\r\nvar formSubmitter = new fScraper.FormSubmitter();\r\n\r\nformProvider.updateOptions({\r\n    formId: \"#login\",\r\n    url: \"http://www.somedomain.com\",\r\n    promisifiedRequest: pRequest\r\n});\r\n\r\nformSubmitter\r\n    .updateOptions({\r\n        formProvider: formProvider,\r\n        promisifiedRequest: pRequest\r\n    })\r\n    .submitForm(loginDetails)\r\n        .then(function(response) {\r\n            console.log(response.body);\r\n        });\r\n```",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/tounano/form-scraper/issues"
  },
  "_id": "form-scraper@0.0.4",
  "dist": {
    "shasum": "ea4e8f7b1d37b862a0118823217410d73927c2a8"
  },
  "_from": "form-scraper@",
  "_resolved": "https://registry.npmjs.org/form-scraper/-/form-scraper-0.0.4.tgz"
}
